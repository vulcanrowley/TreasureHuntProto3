
html
  head
    script(src="http://labs.phaser.io/build/dev.js")
    script(src="//cdn.jsdelivr.net/npm/@mikewesthad/dungeon@1.2.2")
    
    script(src="https://cdn.socket.io/3.1.3/socket.io.min.js" )
  body
  
    script.
      var sceneSeed = "#{SceneCode}"
      console.log("Scene Code from Pug",sceneSeed)
    
    //script(src='/public/js/game.js' )


    
    script. 
        class Player {
            constructor(scene, x, y) {
                this.scene = scene;

                const anims = scene.anims;
                anims.create({
                key: "player-walk",
                frames: anims.generateFrameNumbers("characters", { start: 46, end: 49 }),
                frameRate: 8,
                repeat: -1,
                });
                anims.create({
                key: "player-walk-back",
                frames: anims.generateFrameNumbers("characters", { start: 65, end: 68 }),
                frameRate: 8,
                repeat: -1,
                });

                this.sprite = scene.physics.add.sprite(x, y, "characters", 0).setSize(22, 33).setOffset(23, 27);

                this.sprite.anims.play("player-walk-back");

                this.keys = scene.input.keyboard.createCursorKeys();
            }

            freeze() {
                this.sprite.body.moves = false;
            }

            update() {
                const keys = this.keys;
                const sprite = this.sprite;
                const speed = 300;
                const prevVelocity = sprite.body.velocity.clone();

                // Stop any previous movement from the last frame
                sprite.body.setVelocity(0);

                // Horizontal movement
                if (keys.left.isDown) {
                sprite.body.setVelocityX(-speed);
                sprite.setFlipX(true);
                } else if (keys.right.isDown) {
                sprite.body.setVelocityX(speed);
                sprite.setFlipX(false);
                }

                // Vertical movement
                if (keys.up.isDown) {
                sprite.body.setVelocityY(-speed);
                } else if (keys.down.isDown) {
                sprite.body.setVelocityY(speed);
                }

                // Normalize and scale the velocity so that sprite can't move faster along a diagonal
                sprite.body.velocity.normalize().scale(speed);

                // Update the animation last and give left/right animations precedence over up/down animations
                if (keys.left.isDown || keys.right.isDown || keys.down.isDown) {
                sprite.anims.play("player-walk", true);
                } else if (keys.up.isDown) {
                sprite.anims.play("player-walk-back", true);
                } else {
                sprite.anims.stop();

                // If we were moving, pick and idle frame to use
                if (prevVelocity.y < 0) sprite.setTexture("characters", 65);
                else sprite.setTexture("characters", 46);
                }
            }

            destroy() {
                this.sprite.destroy();
            }
        }

     

    script. 
        // Our custom tile mapping with:
        // - Single index for putTileAt
        // - Array of weights for weightedRandomize
        // - Array or 2D array for putTilesAt
        // was  //TILE_MAPPING = {
        const TILES = {
            BLANK: 20,
            WALL: {
                TOP_LEFT: 3,
                TOP_RIGHT: 4,
                BOTTOM_RIGHT: 23,
                BOTTOM_LEFT: 22,
                TOP: [
                    { index: 39, weight: 4 },
                    { index: [57, 58, 59], weight: 1 },
                ],
                LEFT: [
                    { index: 21, weight: 4 },
                    { index: [76, 95, 114], weight: 1 },
                ],
                RIGHT: [
                    { index: 19, weight: 4 },
                    { index: [77, 96, 115], weight: 1 },
                ],
                BOTTOM: [
                    { index: 1, weight: 4 },
                    { index: [78, 79, 80], weight: 1 },
                ],
            },
            FLOOR: [
                { index: 6, weight: 9 },
                { index: [7, 8, 26], weight: 1 },
            ],
            POT: [
                [32]
            ],
            DOOR: {
                TOP: [40, 6, 38],
                // prettier-ignore
                LEFT: [
                    [40], 
                    [6], 
                    [2]
                ],
                BOTTOM: [2, 6, 0],
                // prettier-ignore
                RIGHT: [
                    [38], 
                    [6], 
                    [0]
                ],
            },
            CHEST: 166,
            STAIRS: 81,
            // prettier-ignore
            TOWER: [
                [186],
                [205]
            ],
            EXIT: [152,153],
        };

    script. 
        /**
        * A small helper class that can take control of our shadow tilemap layer. It keeps track of which
        * room is currently active.
        */
        class TilemapVisibility {
            constructor(shadowLayer) {
                this.shadowLayer = shadowLayer;
                this.activeRoom = null;
            }

            setActiveRoom(room) {
                // We only need to update the tiles if the active room has changed
                if (room !== this.activeRoom) {
                this.setRoomAlpha(room, 0); // Make the new room visible
                if (this.activeRoom) this.setRoomAlpha(this.activeRoom, 0.5); // Dim the old room
                this.activeRoom = room;
                }
            }

            // Helper to set the alpha on all tiles within a room
            setRoomAlpha(room, alpha) {
                this.shadowLayer.forEachTile(
                (t) => (t.alpha = alpha),
                this,
                room.x,
                room.y,
                room.width,
                room.height
                );
            }
        }
    
    script. 
        class Game extends Phaser.Scene {
            constructor() {
                super({ key: 'GameScene' })
            
            }
            
            //init (data)// used to transfer data into scene from scene.start
            //{
            //    console.log('init', data);
            //
            //    this.imageID = data.id;
            //    this.imageFile = data.image;
            //}
        
            preload() {
                this.load.image("tiles", "../assets/tilesets/buch-tileset-48px-extruded.png");
                this.load.spritesheet(
                "characters",
                "../assets/spritesheets/buch-characters-64px-extruded.png",
                {
                    frameWidth: 64,
                    frameHeight: 64,
                    margin: 1,
                    spacing: 2,
                }
                 );

            }
        
            create() {
                // Generate a random world with a few extra options:
                //  - Rooms should only have odd number dimensions so that they have a center tile.
                //  - Doors should be at least 2 tiles away from corners, so that we can place a corner tile on
                //    either side of the door location
                this.dungeon = new Dungeon({
                width: 50,
                height: 50,
                doorPadding: 2,
                randomSeed: sceneSeed,//this.level,
                rooms: {
                    width: { min: 7, max: 15, onlyOdd: true },
                    height: { min: 7, max: 15, onlyOdd: true },
                },
                });

                this.dungeon.drawToConsole();

                // Creating a blank tilemap with dimensions matching the dungeon
                const map = this.make.tilemap({
                    tileWidth: 48,
                    tileHeight: 48,
                    width: this.dungeon.width,
                    height: this.dungeon.height,
                });
                const tileset = map.addTilesetImage("tiles", null, 48, 48, 1, 2); // 1px margin, 2px spacing
                this.groundLayer = map.createBlankLayer("Ground", tileset).fill(TILES.BLANK);
                this.stuffLayer = map.createBlankLayer("Stuff", tileset);
                const shadowLayer = map.createBlankLayer("Shadow", tileset).fill(TILES.BLANK);

                this.tilemapVisibility = new TilemapVisibility(shadowLayer);

                // Use the array of rooms generated to place tiles in the map
                // Note: using an arrow function here so that "this" still refers to our scene
                this.dungeon.rooms.forEach((room) => {
                    const { x, y, width, height, left, right, top, bottom } = room;

                    // Fill the floor with mostly clean tiles
                    this.groundLayer.weightedRandomize(TILES.FLOOR, x + 1, y + 1, width - 2, height - 2);

                    // Place the room corners tiles
                    this.groundLayer.putTileAt(TILES.WALL.TOP_LEFT, left, top);
                    this.groundLayer.putTileAt(TILES.WALL.TOP_RIGHT, right, top);
                    this.groundLayer.putTileAt(TILES.WALL.BOTTOM_RIGHT, right, bottom);
                    this.groundLayer.putTileAt(TILES.WALL.BOTTOM_LEFT, left, bottom);

                    // Fill the walls with mostly clean tiles
                    this.groundLayer.weightedRandomize(TILES.WALL.TOP, left + 1, top, width - 2, 1);
                    this.groundLayer.weightedRandomize(TILES.WALL.BOTTOM, left + 1, bottom, width - 2, 1);
                    this.groundLayer.weightedRandomize(TILES.WALL.LEFT, left, top + 1, 1, height - 2);
                    this.groundLayer.weightedRandomize(TILES.WALL.RIGHT, right, top + 1, 1, height - 2);

                    // Dungeons have rooms that are connected with doors. Each door has an x & y relative to the
                    // room's location. Each direction has a different door to tile mapping.
                    const doors = room.getDoorLocations(); // → Returns an array of {x, y} objects
                    for (let i = 0; i < doors.length; i++) {
                        if (doors[i].y === 0) {
                        this.groundLayer.putTilesAt(TILES.DOOR.TOP, x + doors[i].x - 1, y + doors[i].y);
                        } else if (doors[i].y === room.height - 1) {
                        this.groundLayer.putTilesAt(TILES.DOOR.BOTTOM, x + doors[i].x - 1, y + doors[i].y);
                        } else if (doors[i].x === 0) {
                        this.groundLayer.putTilesAt(TILES.DOOR.LEFT, x + doors[i].x, y + doors[i].y - 1);
                        } else if (doors[i].x === room.width - 1) {
                        this.groundLayer.putTilesAt(TILES.DOOR.RIGHT, x + doors[i].x, y + doors[i].y - 1);
                        }
                    }
                });

                // Separate out the rooms into:
                //  - The starting room (index = 0)
                //  - A random room to be designated as the end room (with stairs and nothing else)
                //  - An array of 90% of the remaining rooms, for placing random stuff (leaving 10% empty)
                const rooms = this.dungeon.rooms.slice();
                // segregate special rooms
                const startRoom = rooms.shift();
                const goalRoom = Phaser.Utils.Array.RemoveRandomElement(rooms);
                const endRoom1 = Phaser.Utils.Array.RemoveRandomElement(rooms);
                const endRoom2 = Phaser.Utils.Array.RemoveRandomElement(rooms);
                const otherRooms = Phaser.Utils.Array.Shuffle(rooms).slice(0, rooms.length * 0.98);

                // Place the Treasure
                this.stuffLayer.putTileAt(TILES.CHEST, goalRoom.centerX, goalRoom.centerY);

                // Place the Exits
                this.stuffLayer.putTilesAt([152,153], endRoom1.centerX, endRoom1.centerY);
                this.stuffLayer.putTilesAt(TILES.EXIT, endRoom2.centerX, endRoom2.centerY);

                // Place stuff in the 90% "otherRooms"
                otherRooms.forEach((room) => {
                    //console.log("room "+room.centerX);
                    //console.log(" side wall -"+ room.left+" "+room.right  );
                    const rand = Math.floor(Math.random()*3) // random between 0-2 inclusive
                    this.stuffLayer.putTilesAt(TILES.POT, room.centerX - 1, room.centerY + 1);
                    this.stuffLayer.putTilesAt(TILES.POT, room.centerX + 1, room.centerY + 1);
                    this.stuffLayer.putTilesAt(TILES.POT, room.centerX - 1, room.centerY - 2);
                    this.stuffLayer.putTilesAt(TILES.POT, room.centerX + 1, room.centerY - 2);
                    /*
                    const rand = Math.random();
                    
                    this.stuffLayer.putTilesAt(TILES.POT, room.centerX - 1, room.centerY + 1);
                    this.stuffLayer.putTilesAt(TILES.POT, room.centerX + 1, room.centerY + 1);
                    this.stuffLayer.putTilesAt(TILES.POT, room.centerX - 1, room.centerY - 2);
                    this.stuffLayer.putTilesAt(TILES.POT, room.centerX + 1, room.centerY - 2);
                
                    if (rand <= 0.25) {
                        // 25% chance of chest
                        this.stuffLayer.putTileAt(TILES.CHEST, room.centerX, room.centerY);
                    } else if (rand <= 0.5) {
                        // 50% chance of a pot anywhere in the room... except don't block a door!
                        const x = Phaser.Math.Between(room.left + 2, room.right - 2);
                        const y = Phaser.Math.Between(room.top + 2, room.bottom - 2);
                        this.stuffLayer.weightedRandomize(x, y, 1, 1, TILES.POT);
                    } else {
                        // 25% of either 2 or 4 towers, depending on the room size
                        if (room.height >= 9) {
                            this.stuffLayer.putTilesAt(TILES.TOWER, room.centerX - 1, room.centerY + 1);
                            this.stuffLayer.putTilesAt(TILES.TOWER, room.centerX + 1, room.centerY + 1);
                            this.stuffLayer.putTilesAt(TILES.TOWER, room.centerX - 1, room.centerY - 2);
                            this.stuffLayer.putTilesAt(TILES.TOWER, room.centerX + 1, room.centerY - 2);
                        } else {
                            this.stuffLayer.putTilesAt(TILES.TOWER, room.centerX - 1, room.centerY - 1);
                            this.stuffLayer.putTilesAt(TILES.TOWER, room.centerX + 1, room.centerY - 1);
                        }
                    }
                */
                });

                // Not exactly correct for the tileset since there are more possible floor tiles, but this will
                // do for the example.
                this.groundLayer.setCollisionByExclusion([-1, 6, 7, 8, 26]);
                this.stuffLayer.setCollisionByExclusion([-1, 6, 7, 8, 26]);

                this.stuffLayer.setTileIndexCallback(TILES.STAIRS, () => {
                    this.stuffLayer.setTileIndexCallback(TILES.STAIRS, null);
                    //this.hasPlayerReachedStairs = true;
                    //this.player.freeze();
                    const cam = this.cameras.main;
                    cam.fade(250, 0, 0, 0);
                    cam.once("camerafadeoutcomplete", () => {
                        //this.player.destroy();
                        this.scene.restart();
                    });
                });
                ////// END of DUNGEON GENERATION

                // Game Code

                this.socket = io();
                var players = {};

                // Place the player in the first room
                const playerRoom = startRoom;
                const x = map.tileToWorldX(playerRoom.centerX);
                const y = map.tileToWorldY(playerRoom.centerY);
                this.player = new Player(this, x, y);

                // Watch the player and tilemap layers for collisions, for the duration of the scene:
                this.physics.add.collider(this.player.sprite, this.groundLayer);
                this.physics.add.collider(this.player.sprite, this.stuffLayer);

                // Phaser supports multiple cameras, but you can access the default camera like this:
                const camera = this.cameras.main;

                // Constrain the camera so that it isn't allowed to move outside the width/height of tilemap
                camera.setBounds(0, 0, map.widthInPixels, map.heightInPixels);
                camera.startFollow(this.player.sprite);

                // Help text that has a "fixed" position on the screen
                this.add
                .text(16, 16, `Get the TREASURE and carry to the EXIT`, {
                    font: "18px monospace",
                    fill: "#000000",
                    padding: { x: 20, y: 10 },
                    backgroundColor: "#ffffff",
                })
                .setScrollFactor(0);




            }
        
            update() {
                this.player.update();

                // Find the player's room using another helper method from the dungeon that converts from
                // dungeon XY (in grid units) to the corresponding room object
                const playerTileX = this.groundLayer.worldToTileX(this.player.sprite.x);
                const playerTileY = this.groundLayer.worldToTileY(this.player.sprite.y);
                const playerRoom = this.dungeon.getRoomAt(playerTileX, playerTileY);

                this.tilemapVisibility.setActiveRoom(playerRoom);
            }

           
        }
     

    script. 
        var config = {
        type: Phaser.AUTO,
        parent: "phaser-example",
        width: 800,
        height: 600,
        seed: sceneSeed,
        physics: {
            default: "arcade",
            arcade: {
            debug: false,
            gravity: { y: 0 },
            },
        },
        scene: [Game],
        };

        var game = new Phaser.Game(config);



    